    Interfaces work as a contract: when a class implements it, it must also implement
everything that was specified by the contract (e.g.: properties, functions, delegates, etc).
    An Interface only requires the classes that have implemented it to have its specified
elements named the same way, without caring about what is written inside them. That means
that two classes with the same Interface can still have their equally named elements with
distinct codes from each other, like usual. 
    The main difference from not using this feature lies in the fact that, with Interfaces,
it's possible to refer to every equally named element from these classes with just an 
instance of the Interface they've implemented. In other words, they work similarly to
abstract classes and scriptable objects.
    For example, during a collision, it's possible to detect if the colliding object has a
class that implements an specific interface and call one of its specified functions. This
can be used to avoid collision detectors filled with 'if (col has component classX){do 
function Damage()}' blocks to just a single 'if (col has interface x){do function Damage()}'.